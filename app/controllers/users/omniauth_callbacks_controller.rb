# frozen_string_literal: true

module Users
  class OmniauthCallbacksController < Devise::OmniauthCallbacksController
    protect_from_forgery except: :easy_id

    def self.provides_callback_for(provider)
      class_eval <<-RUBY, __FILE__, __LINE__ + 1
      def #{provider}
        @user = User.find_for_omniauth(request.env["omniauth.auth"], current_user)

        flash['error'] ||= []
        flash['success'] ||= []

        if @user.present? && request.env["omniauth.params"].blank?
          session[:user_original_url] = user_settings_path(current_user.id) + "?subsite=account" if request.referer.present? && request.referer.include?("settings?subsite=account")
          sign_in_and_redirect @user, event: :authentication
          set_flash_message(:notice, :success, kind: "#{OmniAuth::Utils.camelize(provider)}") if is_navigational_format?
        elsif @user.present? && request.env["omniauth.params"].present?
          current_user_logged_in = current_user.present?
          handle_omniauth_params
          sign_in_and_redirect @user, event: :authentication
          set_flash_message(:notice, :success, kind: "#{OmniAuth::Utils.camelize(provider)}") if is_navigational_format? && !current_user_logged_in
        else
          session["devise.#{provider}_data"] = request.env["omniauth.auth"].slice('uid', 'provider')
          session["devise.#{provider}_data"]["info"] = request.env["omniauth.auth"]["info"].slice('email', 'verified', 'verified_info', 'image')
          session["devise.#{provider}_data"]["valid_until"] = Time.zone.now + 10.minutes
          redirect_to new_user_session_url
        end
      end
      RUBY
    end

    %i[facebook google github linkedin twitter windows_live amazon openhpi].each do |provider|
      provides_callback_for provider
    end

    def deauthorize
      flash['error'] ||= []
      flash['success'] ||= []
      if current_user.identities.count > 1 || !current_user.password_autogenerated
        begin
          UserIdentity.find_by(user: current_user, omniauth_provider: deauthorize_params[:provider]).destroy!
        rescue StandardError
          flash['error'] << t('users.settings.identity_not_deleted', provider: OmniAuth::Utils.camelize(deauthorize_params[:provider]))
        else
          flash['success'] << t('users.settings.identity_deleted', provider: OmniAuth::Utils.camelize(deauthorize_params[:provider]))
        end
      else
        flash['error'] << t('users.settings.identity_not_deleted', provider: OmniAuth::Utils.camelize(deauthorize_params[:provider]))
      end
      flash.keep
      redirect_to "#{user_settings_path(current_user.id)}?subsite=account"
    end

    private

    def handle_omniauth_params
      session.delete(:user_original_url)
      session[:user_original_url] = load_and_save_evaluation_path(request.env['omniauth.params'])
    end

    def deauthorize_params
      params.permit(:provider)
    end
  end
end
