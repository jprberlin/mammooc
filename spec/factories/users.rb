# frozen_string_literal: true
# UserEmail Association build in accordance with
# https://stackoverflow.com/questions/17754770/factorygirl-build-stubbed-strategy-with-a-has-many-association

FactoryBot.define do
  factory :user do
    transient do
      new_record { true }
    end

    sequence(:full_name) { |n| "Max_#{n} Mustermann" }
    password { '12345678' }
    sequence(:primary_email) { |n| "max.mustermann_#{n}@example.com" }

    after(:stub) do |user, evaluator|
      user.define_singleton_method(:new_record?) do
        evaluator.new_record
      end

      user.emails = if evaluator.primary_email.nil?
                      build_stubbed_list(:user_email, 1, user: user)
                    else
                      build_stubbed_list(:user_email, 1, user: user, address: evaluator.primary_email)
                    end
      allow(user).to receive(:primary_email).and_return(user.emails.first.address)
      allow(user.emails.first).to receive(:destroyed?).and_return false
    end
  end

  factory :fullUser, class: User do
    transient do
      new_record { true }
    end

    full_name { 'Maximus Mustermannnus' }
    password { '12345678' }
    password_autogenerated { false }
    gender { 'Titan' }
    about_me { 'Sieh mich an und erstarre!' }
    sequence(:primary_email) { |n| "max.mustermann_#{n}@example.com" }

    after(:stub) do |user|
      user.define_singleton_method(:new_record?) do
        evaluator.new_record
      end

      user.emails = build_stubbed_list(:user_email, 1, user: user)
      allow(user).to receive(:primary_email).and_return(user.emails.first.address)
      allow(user.emails.first).to receive(:destroyed?).and_return false
    end
  end

  factory :OmniAuthUser, class: User do
    transient do
      new_record { true }
    end

    sequence(:full_name) { |n| "Max_#{n} Mustermann" }
    password { Devise.friendly_token[0, 20] }
    password_autogenerated { true }

    after(:create) do |user|
      identity = create(:user_identity, user: user)
      create(:user_email, user: user, address: "autogenerated@#{identity.provider_user_id.downcase}-#{identity.omniauth_provider.downcase}.com")
    end

    after(:stub) do |user|
      user.define_singleton_method(:new_record?) do
        evaluator.new_record
      end

      identity = create(:user_identity, user: user)
      user.emails = build_stubbed_list(:user_email, user: user, address: "autogenerated@#{identity.provider_user_id.downcase}-#{identity.omniauth_provider.downcase}.com")
      allow(user).to receive(:primary_email).and_return(user.emails.first.address)
      allow(user.emails.first).to receive(:destroyed?).and_return false
    end
  end
end
