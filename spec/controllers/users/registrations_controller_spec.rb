# frozen_string_literal: true

require 'rails_helper'

# rubocop:disable RSpec/NamedSubject
RSpec.describe Users::RegistrationsController, type: :controller do
  include Devise::Test::ControllerHelpers

  before do
    request.env['devise.mapping'] = Devise.mappings[:user]
  end

  context 'user registration' do
    it 'works with valid signup data' do
      post :create, params: {user: {first_name: 'John', last_name: 'Doe', email: 'user@example.org', password: 'password', password_confirmation: 'password'}}
      expect(subject.signed_in?).to be_truthy
    end
  end

  context 'update user' do
    let(:user) { FactoryGirl.create(:user) }

    before do
      sign_in user
    end

    it 'works with a user where the password is not autogenerated' do
      put :update, params: {user: {primary_email: 'new@example.com', current_password: user.password}}
      expect(user.primary_email).to eq 'new@example.com'
    end

    it 'validates if the new primary email address is valid' do
      put :update, params: {user: {primary_email: 'invalidexample.com', current_password: user.password}}
      expect(user.primary_email).not_to eq 'invalidexample.com'
      expect(flash['error']).to include(I18n.t('devise.registrations.email.invalid'))
    end

    it 'validates if the new primary email address is already taken' do
      second_user = FactoryGirl.create(:user)
      put :update, params: {user: {primary_email: second_user.primary_email, current_password: user.password}}
      expect(user.primary_email).not_to eq second_user.primary_email
      expect(flash['error']).to include(I18n.t('devise.registrations.email.taken'))
    end

    it 'requires the old password if it was not autogenerated' do
      patch :update, params: {user: {primary_email: 'new@example.com', current_password: 'wrong password'}}
      expect(user.reload.primary_email).not_to eq 'new@example.com'
    end

    it 'does not require the password if it was autogenerated' do
      user.password_autogenerated = true
      user.save!
      patch :update, params: {user: {primary_email: 'new@example.com'}}
      expect(user.primary_email).to eq 'new@example.com'
      expect(user.reload.password_autogenerated).to eq true
    end

    it 'removes the password autogenerated flag if the user sets his own password' do
      user.password_autogenerated = true
      user.save!
      patch :update, params: {user: {password: '12345678', password_confirmation: '12345678'}}
      expect(user.reload.password_autogenerated).to eq false
    end

    it 'does not remove the password autogenerated flag if the new password could not be used' do
      user.password_autogenerated = true
      user.save!
      sign_in user
      patch :update, params: {user: {password: '12345678', password_confirmation: '87654321'}}
      expect(user.reload.password_autogenerated).to eq true
    end

    it 'returns the changed primary email address if the update was not successful' do
      expect_any_instance_of(described_class).to receive(:update_resource).and_return(false)
      patch :update, params: {user: {primary_email: 'changed@example.com'}}
      expect(session[:resource]['primary_email']).to eq 'changed@example.com'
    end

    it 'does not return the primary email address if the address was autogenerated and the update was not successful' do
      expect_any_instance_of(described_class).to receive(:update_resource).and_return(false)
      expect_any_instance_of(ApplicationController).to receive(:ensure_signup_complete).and_return(true)
      allow_any_instance_of(UserEmail).to receive(:autogenerated?).and_return(true)
      patch :update, params: {user: {password: '12345678', password_confirmation: '87654321'}}
      expect(session[:resource]['primary_email']).to be_nil
    end
  end

  context 'update OmniAuth user' do
    let(:user) { FactoryGirl.create(:OmniAuthUser) }

    before do
      sign_in user
    end

    it 'updates an auto-generated email address especially with an OmniAuth user' do
      expect(user.emails.find_by(address: user.primary_email).autogenerated?).to be_truthy
      put :update, params: {user: {primary_email: 'new@example.com'}}
      user.reload
      expect(user.primary_email).to eq 'new@example.com'
    end
  end
end
# rubocop:enable RSpec/NamedSubject
